// Generated by CoffeeScript 1.3.3
(function() {

  window.Loader = (function() {

    function Loader() {
      this._urls = [];
      this._urlsIndex = 0;
      this._count = 0;
      this._after = null;
      this._resultsPerPage = 25;
    }

    Loader.prototype.setup = function(callback) {
      var _this = this;
      return this._addUrls('next').done(function() {
        _this._urlsIndex = Math.floor(_this._urls.length / 2);
        console.log("urlsIndex is " + _this._urlsIndex);
        return callback(_this._urls[_this._urlsIndex]);
      });
    };

    Loader.prototype.nextUrl = function() {
      return this._getUrl('next');
    };

    Loader.prototype.prevUrl = function() {
      return this._getUrl('prev');
    };

    Loader.prototype._getUrl = function(direction) {
      if (!this._urls.length) {
        throw new Error('No initial urls. Did you call loader.setup?');
      }
      if (this._indexNearBoundaries()) {
        this._addUrls(direction);
      }
      if (this._urlsIndex > 0 && this._urlsIndex < this._urls.length) {
        this._urlsIndex += direction === 'next' ? 1 : -1;
      }
      return this._urls[this._urlsIndex];
    };

    Loader.prototype._addUrls = function(direction) {
      var _this = this;
      return this._loadUrls(function(newUrls) {
        if (direction === 'next') {
          Utils.concat(_this._urls, newUrls);
        } else if (direction === 'prev') {
          _this._urls = newUrls.concat(_this._urls);
          _this._urlsIndex += newUrls.length;
        }
        console.log('urls is now...');
        console.log(_this._urls);
        return console.log('');
      });
    };

    Loader.prototype._indexNearBoundaries = function() {
      var length, lowerIndex, upperIndex;
      length = this._urls.length;
      lowerIndex = 5;
      upperIndex = length - lowerIndex;
      return this._urlsIndex <= lowerIndex || this._urlsIndex >= upperIndex;
    };

    Loader.prototype._loadUrls = function(callback) {
      var params, url,
        _this = this;
      this._count += this._resultsPerPage;
      url = 'http://www.reddit.com/r/aww';
      params = "limit=" + this._resultsPerPage + "&count=" + this._count;
      if (this._after) {
        params += "&after=" + this._after;
      }
      return $.ajax({
        type: 'GET',
        url: "" + url + ".json?" + params,
        dataType: 'jsonp',
        jsonp: 'jsonp',
        success: function(data) {
          var link, urls, valid;
          _this._before = data.data.before;
          _this._after = data.data.after;
          urls = (function() {
            var _i, _len, _ref, _results;
            _ref = data.data.children;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              link = _ref[_i];
              _results.push(link.data.url);
            }
            return _results;
          })();
          valid = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = urls.length; _i < _len; _i++) {
              url = urls[_i];
              if (Utils.isImageUrl(url)) {
                _results.push(url);
              }
            }
            return _results;
          })();
          return typeof callback === "function" ? callback(valid) : void 0;
        }
      });
    };

    return Loader;

  })();

}).call(this);
